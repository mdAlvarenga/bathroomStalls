monada lista

return :: a -> m a
return x = [x]

fmap :: (a -> b) -> m a -> m b
fmap f xs = map f xs

join :: m(m a) -> m a
join xxs = concat xxs

bind :: m a -> (a -> m b) - m b
bind m f = join (fmap f m)  O  (concat Map)



ejemplo de los cofres:
solve keys [] ]result = return result
solve keys chests result = 
	do 
		c <- filter(canOpen keys) chests //Es el primer cofre que puedo abrir con la llave que tengo, y estÃ¡ ordenado lexicograficamente.

		solve 	(updateKeys keys chests) 
				(chests \\ [c]) // barra barra elimina las ocurrencias comparables por igual igual...
				result ++ [c]


lo llamo con solve keys cs []


////////////////////////
main = 
    do
    putStr "Enter the name of the file to read: "
    fileName <- getLine
    -- withFile open file and close it after use
    withFile (fileName ++ ".txt") ReadMode (\handle -> do
        -- Get contents of file
        content <- hGetContents handle  
        let contentLines = lines content
        -- Manipulate data
            solution = processInput (drop 1 contentLines) 
        -- Print output, save it to new file
        let newContent = unlines solution
        putStr newContent
        writeFile (fileName ++ "_solved.txt") newContent)
